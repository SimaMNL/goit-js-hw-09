{"mappings":"qhBAAAA,EAAA,S,iBAIAC,eAAeC,EAAcC,EAAUC,GACrC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAIAO,SAASC,cAAc,SAE/BC,iBAAiB,UACtB,SAAsBC,GACpBA,EAAMC,iBACN,MAAQX,MAAAY,EAAKC,KAAEA,EAAIC,OAAEA,GAAWJ,EAAMK,cAAcC,SACpD,GAAIJ,EAAMK,MAAQ,GAAKJ,EAAKI,MAAQ,GAAKH,EAAOG,MAAQ,EACtDC,EAAAC,GAASC,OAAOC,QAAQ,2CAExB,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAAOG,MAAOK,IAAK,CACrC,IAAIC,EAAWD,EAAI,EACnB,MAAME,EAASC,OAAOb,EAAMK,OAASJ,EAAKI,MAAQK,EAClDxB,EAAcyB,EAAUC,GACrBE,MAAK,EAAC3B,SAAEA,EAAQC,MAAEA,MACjBkB,EAAAC,GAASC,OAAOO,QACd,uBAAqB5B,QAAiBC,OACrC4B,QACDC,IAAQ,uBAAK9B,QAAiCC,MAAY,IAE7D8B,OAAM,EAAC/B,SAAEA,EAAQC,MAAEA,MAClBkB,EAAAC,GAASC,OAAOW,QACd,sBAAoBhC,QAAiBC,OACpC4B,QACDC,IAAQ,iBACL9B,wBAA2BC,MAAsB,G,CAK5DU,EAAMK,cAAciB,O","sources":["src/js/03-promises.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport Notiflix from 'notiflix';\n\nasync function createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', onSubmitForm);\nfunction onSubmitForm(event) {\n  event.preventDefault();\n  const { delay, step, amount } = event.currentTarget.elements;\n  if (delay.value < 0 || step.value < 0 || amount.value < 0) {\n    Notiflix.Notify.warning(`!!! Please enter a positive number`);\n  } else {\n    for (let i = 0; i < amount.value; i++) {\n      let position = i + 1;\n      const delays = Number(delay.value) + step.value * i;\n      createPromise(position, delays)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          ),\n            console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          ),\n            console.log(\n              `❌ Promisiunea ${position} a fost respinsă în ${delay}ms`\n            );\n        });\n    }\n  }\n  event.currentTarget.reset();\n}\n"],"names":["parcelRequire","async","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","document","querySelector","addEventListener","event","preventDefault","delay1","step","amount","currentTarget","elements","value","$parcel$interopDefault","$1GAPJ","Notify","warning","i","position1","delays","Number","then","success","console","log","catch","failure","reset"],"version":3,"file":"03-promises.c3733bcf.js.map"}